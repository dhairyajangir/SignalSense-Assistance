// convert-font.js
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { Font } from 'fonteditor-core';

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Font files to include for better Unicode coverage
// Prefer local TTF/OTF assets (recommended by jsPDF), fall back to WOFF from @fontsource if missing.
const candidates = {
  notoSansLatin: [
    'assets/fonts/NotoSans-Regular.ttf',
    'node_modules/@fontsource/noto-sans/files/noto-sans-latin-400-normal.woff',
  ],
  notoSansDevanagari: [
    'assets/fonts/NotoSansDevanagari-Regular.ttf',
    'node_modules/@fontsource/noto-sans/files/noto-sans-devanagari-400-normal.woff',
  ],
  notoSansLatinExt: [
    'assets/fonts/NotoSans-Regular.ttf', // covered by the same TTF
    'node_modules/@fontsource/noto-sans/files/noto-sans-latin-ext-400-normal.woff',
  ],
  notoSansCyrillic: [
    'assets/fonts/NotoSans-Regular.ttf', // covered by the same TTF
    'node_modules/@fontsource/noto-sans/files/noto-sans-cyrillic-400-normal.woff',
  ],
  notoSansGreek: [
    'assets/fonts/NotoSans-Regular.ttf', // covered by the same TTF
    'node_modules/@fontsource/noto-sans/files/noto-sans-greek-400-normal.woff',
  ],
  notoSansVietnamese: [
    'assets/fonts/NotoSans-Regular.ttf', // covered by the same TTF
    'node_modules/@fontsource/noto-sans/files/noto-sans-vietnamese-400-normal.woff',
  ],
  notoSansJP: [
    'assets/fonts/NotoSansJP-Regular.otf',
  ],
  notoSansBengali: [
    'assets/fonts/NotoSansBengali-Regular.ttf',
  ],
  notoSansGurmukhi: [
    'assets/fonts/NotoSansGurmukhi-Regular.ttf',
  ],
  notoSansGujarati: [
    'assets/fonts/NotoSansGujarati-Regular.ttf',
  ],
  notoSansTamil: [
    'assets/fonts/NotoSansTamil-Regular.ttf',
  ],
  notoSansTelugu: [
    'assets/fonts/NotoSansTelugu-Regular.ttf',
  ],
  notoSansKannada: [
    'assets/fonts/NotoSansKannada-Regular.ttf',
  ],
  notoSansMalayalam: [
    'assets/fonts/NotoSansMalayalam-Regular.ttf',
  ],
  notoSansOriya: [
    'assets/fonts/NotoSansOriya-Regular.ttf',
  ],
  // Optional: Japanese (CJK). Very large; add only if needed.
  // notoSansJP: [
  //   'assets/fonts/NotoSansJP-Regular.otf',
  // ]
};

const fontFiles = Object.entries(candidates).map(([name, paths]) => ({ name, paths }));

let outputContent = `// This file is auto-generated by convert-font.js
`;

for (const font of fontFiles) {
  let resolvedPath = null;
  for (const p of font.paths) {
    const tryPath = path.resolve(__dirname, p);
    if (fs.existsSync(tryPath)) { resolvedPath = tryPath; break; }
  }
  if (!resolvedPath) {
    console.warn(`Font not found for ${font.name}. Tried: ${font.paths.join(', ')}`);
    continue;
  }

  let fontBuffer = fs.readFileSync(resolvedPath);
  const ext = path.extname(resolvedPath).toLowerCase();

  if (ext === '.otf') {
    try {
      const font = Font.create(fontBuffer, { type: 'otf' });
      const ttfBuffer = font.write({ type: 'ttf', hinting: true });
      fontBuffer = Buffer.from(ttfBuffer);
    } catch (err) {
      console.warn(`Failed to convert OTF to TTF for ${resolvedPath}:`, err);
    }
  }

  const base64Font = fontBuffer.toString('base64');
  outputContent += `export const ${font.name}Base64 = '${base64Font}';\n`;
}

fs.writeFileSync(
  path.resolve(__dirname, 'utils/customFont.ts'),
  outputContent
);

console.log('Successfully created utils/customFont.ts with multiple fonts');